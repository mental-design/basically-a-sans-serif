languagesystem DFLT dflt;
languagesystem latn dflt;

@numerics = [zero one two three four five six seven eight nine parenleft parenright bracketleft bracketright braceleft braceright];
@operators = [hyphen plus minus multiply divide plusminus equal less greater almost_equal not_equal less_equal greater_equal];
@eyes = [colon semicolon];

feature aalt {
    feature calt;
} aalt;

# Position operators
lookup posops {
    pos @numerics @operators' @numerics <0 60 0 0>;
    pos @numerics @operators' space @numerics <0 60 0 0>;
    pos @numerics space @operators' @numerics <0 60 0 0>;
    pos @numerics space @operators' space @numerics <0 60 0 0>;
} posops;

# Substitute operators
lookup subops {
    sub @numerics space hyphen' space @numerics by minus;
    sub @numerics plus' hyphen' @numerics by plusminus;
    sub @numerics plus' hyphen' space @numerics by plusminus;
    sub @numerics space plus' hyphen' @numerics by plusminus;
    sub @numerics space plus' hyphen' space @numerics by plusminus;
} subops;

# Align smileys
lookup smile {
    pos @eyes' hyphen <0 150 0 0>;
    pos hyphen @eyes' <0 150 0 0>;

    pos @eyes hyphen' <0 60 0 0>;
    pos hyphen' @eyes <0 60 0 0>;
} smile;

feature calt {
    lookup posops;
    lookup subops;
    lookup smile;
    
    pos @numerics colon' @numerics <0 150 0 0>;  # adjust : for time
} calt;